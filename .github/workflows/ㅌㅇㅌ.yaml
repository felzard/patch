name: JP Menu Rework Test (CI/CD)

on:
  repository_dispatch:
    types: [build-jp-menu-apk]
  workflow_dispatch:
    inputs:
      trigger_source:
        description: 'Manual trigger source (optional)'
        required: false
        default: 'manual'

jobs:
  automate-shit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download tools and keys
        run: |
          curl -L -o APKEditor.jar https://github.com/felzard/patch/releases/download/1/apkeditor.jar
          curl -L -o apksigner.jar https://github.com/felzard/patch/releases/download/1/apksigner.jar
          curl -L -o aapt2.exe https://github.com/felzard/patch/releases/download/1/aapt2.exe
          curl -L -o smali.jar https://github.com/JesusFreke/smali/releases/download/v3.0.3/smali-3.0.3.jar
          curl -L -o baksmali.jar https://github.com/JesusFreke/smali/releases/download/v3.0.3/baksmali-3.0.3.jar
          curl -L -o testkey.pk8 https://github.com/felzard/patch/releases/download/1/testkey.pk8
          curl -L -o testkey.x509.pem https://github.com/felzard/patch/releases/download/1/testkey.x509.pem
          curl -L -o app-debug.zip https://github.com/felzard/patch/releases/download/1/app-debug.zip
          curl -L -o modmenu.automation.py https://github.com/felzard/patch/releases/download/1/modmenu.automation.py
          chmod +x aapt2.exe

      - name: Install apkeep
        run: |
          sudo apt-get update
          sudo apt-get install -y cargo unzip zipalign
          cargo install apkeep

      - name: Download APK/XAPK from APKPure
        run: |
          mkdir -p downloads
          apkeep -a com.sega.pjsekai -d apk-pure downloads

      - name: Prepare base APK
        run: |
          FILE=$(ls downloads/*.{apk,xapk} 2>/dev/null | head -n1)
          if [ -z "$FILE" ]; then echo "‚ùå No .apk or .xapk found"; exit 1; fi

          if [[ "$FILE" == *.xapk ]]; then
            echo "üì¶ Detected XAPK, merging directly using APKEditor.jar..."
            java -jar APKEditor.jar m -i "$FILE" -o base.apk
          else
            echo "üì¶ Detected APK"
            cp "$FILE" base.apk
          fi

      - name: Decode manifest/resources (no rebuild later)
        run: |
          java -jar apktool.jar d base.apk -o decompiled --only-main-classes --no-res --no-src || true

      - name: Extract APK Version
        id: version
        run: |
          VERSION_NAME=$(aapt2.exe dump badging base.apk | grep versionName | sed -E "s/.*versionName='([^']+)'.*/\1/")
          if [ -n "$VERSION_NAME" ]; then
            echo "apk_version=$VERSION_NAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå versionName not found"
            exit 1
          fi

      - name: Integrate modmenu
        run: |
          echo "üì¶ Running modmenu automation..."
          python3 modmenu.automation.py > modmenu_output.txt

          echo "üìÅ Unzipping app-debug.zip..."
          unzip app-debug.zip -d tmp_modmenu

          echo "üìÇ Locating libil2cpp.so..."
          LIB_DIR=$(unzip -l base.apk | grep libil2cpp.so | head -n1 | awk '{print $4}' | xargs dirname)
          if [ -z "$LIB_DIR" ]; then echo "‚ùå libil2cpp.so not found"; exit 1; fi
          echo "üìÇ Injecting native libs into APK"
          zip -d base.apk "$LIB_DIR/*" || true
          zip -r base.apk tmp_modmenu/lib/arm64-v8a/* -j

          echo "üîç Building dex from modmenu smali..."
          java -jar smali.jar assemble tmp_modmenu/smali -o classes_mod.dex

          echo "üìÇ Injecting classes_mod.dex into APK"
          zip -j base.apk classes_mod.dex

      - name: Align APK
        run: |
          zipalign -v -p 4 base.apk patched-aligned.apk

      - name: Sign APK
        run: |
          java -jar apksigner.jar sign \
            --key testkey.pk8 \
            --cert testkey.x509.pem \
            --out patched-signed.apk \
            patched-aligned.apk

      - name: Upload Unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-Unsigned-APK
          path: patched-aligned.apk

      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-Signed-APK
          path: patched-signed.apk

      - name: Notify Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          VERSION=${{ steps.version.outputs.apk_version }}
          RUN_ID=${{ github.run_id }}
          REPO=${{ github.repository }}

          SIGNED_URL="https://nightly.link/${REPO}/actions/runs/${RUN_ID}/ProjectSekai-Signed-APK.zip"
          UNSIGNED_URL="https://nightly.link/${REPO}/actions/runs/${RUN_ID}/ProjectSekai-Unsigned-APK.zip"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "embeds": [{
                "title": "‚ú® Project Sekai APK Mod Menu (JP) New APKs available!",
                "fields": [
                  {
                    "name": "Version",
                    "value": "**'"$VERSION"'**",
                    "inline": true
                  },
                  {
                    "name": "Signed APK",
                    "value": "[Download Signed APK]('"$SIGNED_URL"')",
                    "inline": true
                  },
                  {
                    "name": "Unsigned APK",
                    "value": "[Download Unsigned APK]('"$UNSIGNED_URL"')",
                    "inline": true
                  }
                ]
              }]
            }' \
            $DISCORD_WEBHOOK
