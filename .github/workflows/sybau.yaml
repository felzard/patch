name: Download, Patch & Recompile APK (JP)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  patch-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install apkeep
        run: |
          sudo apt-get update
          sudo apt-get install -y cargo
          cargo install apkeep

      - name: Download APK/XAPK from APKPure
        run: |
          mkdir -p downloads
          apkeep -a com.sega.pjsekai -d apk-pure downloads

      - name: Install apktool & Wine
        run: |
          # apktool
          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O apktool
          wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.0.jar -O apktool.jar
          chmod +x apktool
          sudo mv apktool apktool.jar /usr/local/bin/
          # Wine
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32 wine64 winbind

      - name: Process, Merge & Rebuild APK
        run: |
          set -e
          # Find downloaded file
          FILE=$(ls downloads/*.{apk,xapk} 2>/dev/null | head -n1)
          [ -n "$FILE" ] || { echo "‚ùå No .apk or .xapk found"; exit 1; }

          TMPDIR=$(mktemp -d)
          if [[ "$FILE" == *.xapk ]]; then
            echo "üì¶ Detected XAPK, extracting..."
            unzip -q "$FILE" -d "$TMPDIR"

            echo "üì• Found APKs inside XAPK:"
            mapfile -t APK_LIST < <(find "$TMPDIR" -type f -name "*.apk")
            for p in "${APK_LIST[@]}"; do
              echo "  ‚Ä¢ $(basename "$p")"
            done

            # 1) Choose the true base APK (game package)
            BASE_APK=$(printf "%s\n" "${APK_LIST[@]}" | grep -E "com\.sega\.pjsekai" | head -n1)
            BASE_APK=${BASE_APK:-${APK_LIST[0]}}

            echo "üîß Decompiling base APK: $(basename "$BASE_APK")"
            apktool d "$BASE_APK" -o decompiled

            echo "üîó Merging splits into decompiled/"
            for SPLIT in "${APK_LIST[@]}"; do
              if [[ "$SPLIT" != "$BASE_APK" ]]; then
                echo "  ‚ûï Merging: $(basename "$SPLIT")"
                unzip -o "$SPLIT" -d tmp_extract
                cp -r tmp_extract/lib/*     decompiled/lib/     2>/dev/null || true
                cp -r tmp_extract/assets/*  decompiled/assets/  2>/dev/null || true
                cp -r tmp_extract/res/*     decompiled/res/     2>/dev/null || true
                rm -rf tmp_extract
              fi
            done

            echo "üì¶ Rebuilding merged APK ‚Üí downloads/merged.apk"
            apktool b decompiled -o downloads/merged.apk
          else
            echo "üîß Decompiling single APK ‚Üí decompiled/"
            apktool d "$FILE" -o decompiled
            echo "üì¶ Copying single APK to downloads/merged.apk"
            cp "$FILE" downloads/merged.apk
          fi

      - name: Upload Merged APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-JP-Merged-APK
          path: downloads/merged.apk

      - name: List files in decompiled directory
        run: |
          echo "üìÇ Contents of decompiled/:"
          find decompiled/ -type f | sort

      - name: Patch libil2cpp.so
        run: |
          set -e
          LIB_PATH=$(find decompiled/ -type f -path "*/libil2cpp.so" | head -n1)
          [ -n "$LIB_PATH" ] || { echo "‚ùå libil2cpp.so not found"; exit 1; }

          echo "üîß Patching libil2cpp.so"
          curl -L -o patcher.exe https://github.com/felzard/patch/releases/download/1/JProjectSekai.exe
          cd "$(dirname "$LIB_PATH")"
          wine ../patcher.exe libil2cpp.so
          rm libil2cpp.so ../patcher.exe
          mv libil2cpp_patched.so libil2cpp.so

      - name: Rebuild unsigned APK
        run: |
          apktool b decompiled -o patched-unsigned.apk

      - name: Generate debug keystore
        run: |
          keytool -genkey -v \
            -keystore debug.keystore \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 \
            -validity 10000 \
            -storepass android \
            -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"

      - name: Sign APK with debug keystore
        run: |
          jarsigner \
            -verbose \
            -sigalg SHA1withRSA \
            -digestalg SHA1 \
            -keystore debug.keystore \
            -storepass android \
            -keypass android \
            patched-unsigned.apk \
            androiddebugkey

      - name: Align signed APK
        run: |
          sudo apt-get install -y zipalign
          zipalign -v -p 4 patched-unsigned.apk patched-signed.apk

      - name: Upload Unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-JP-Patched-Unsigned-APK
          path: patched-unsigned.apk

      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-JP-Patched-Signed-APK
          path: patched-signed.apk
