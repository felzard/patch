name: Global (CI/CD)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  automate-shit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install apkeep
        run: |
          sudo apt-get update
          sudo apt-get install -y cargo unzip
          cargo install apkeep

      - name: Download APK/XAPK from APKPure
        run: |
          mkdir -p downloads
          apkeep -a com.sega.ColorfulStage.en -d apk-pure downloads

      - name: Install apktool
        run: |
          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O apktool
          wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.0.jar -O apktool.jar
          chmod +x apktool
          sudo mv apktool apktool.jar /usr/local/bin/

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32 wine64 winbind

      - name: Process and Decompile APK/XAPK
        run: |
          FILE=$(ls downloads/*.{apk,xapk} 2>/dev/null | head -n1)
          if [ -z "$FILE" ]; then echo "‚ùå No .apk or .xapk found"; exit 1; fi

          if [[ "$FILE" == *.xapk ]]; then
            echo "üì¶ Detected XAPK"
            TMPDIR=$(mktemp -d)
            unzip -q "$FILE" -d "$TMPDIR"
            APK_LIST=($(find "$TMPDIR" -type f -name "*.apk"))
            apktool d "${APK_LIST[0]}" -o decompiled
            for ((i=1; i<${#APK_LIST[@]}; i++)); do
              unzip -o "${APK_LIST[i]}" -d tmp_extract
              cp -r tmp_extract/lib/* decompiled/lib/ 2>/dev/null || true
              cp -r tmp_extract/assets/* decompiled/assets/ 2>/dev/null || true
              cp -r tmp_extract/res/* decompiled/res/ 2>/dev/null || true
              rm -rf tmp_extract
            done
          else
            apktool d "$FILE" -o decompiled
          fi

      - name: Debug apktool.yml presence and content
        run: |
          if [ -f decompiled/apktool.yml ]; then
            echo "‚úÖ apktool.yml found!"
            echo "-------- CONTENT --------"
            cat decompiled/apktool.yml
            echo "-------------------------"
          else
            echo "‚ùå apktool.yml not found!"
            exit 1
          fi

      - name: Extract APK Version
        id: version
        run: |
          VERSION_NAME=$(grep -oP '^  versionName:\s*\K.+' decompiled/apktool.yml)
          if [ -n "$VERSION_NAME" ]; then
            echo "apk_version=$VERSION_NAME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå versionName not found in apktool.yml"
            exit 1
          fi

      - name: Patch libil2cpp.so (if exists)
        run: |
          LIB_PATH=$(find decompiled/ -type f -path "*/libil2cpp.so" | head -n1)
          if [ -z "$LIB_PATH" ]; then echo "‚ùå libil2cpp.so not found"; exit 1; fi
          curl -L -o ProjectSekai.exe https://github.com/felzard/patch/releases/download/1/ProjectSekai.exe
          cd "$(dirname "$LIB_PATH")"
          wine "$OLDPWD/ProjectSekai.exe" libil2cpp.so
          rm libil2cpp.so "$OLDPWD/ProjectSekai.exe"
          mv libil2cpp_patched.so libil2cpp.so

      - name: Rebuild unsigned APK
        run: |
          apktool b decompiled -o patched-unsigned.apk

      - name: Download apksigner, aapt2, and keys
        run: |
          curl -L -o apksigner.jar https://github.com/felzard/patch/releases/download/1/apksigner.jar
          curl -L -o aapt2.exe https://github.com/felzard/patch/releases/download/1/aapt2.exe
          curl -L -o testkey.pk8 https://github.com/felzard/patch/releases/download/1/testkey.pk8
          curl -L -o testkey.x509.pem https://github.com/felzard/patch/releases/download/1/testkey.x509.pem
          chmod +x aapt2.exe

      - name: Align APK
        run: |
          sudo apt-get install -y zipalign
          zipalign -v -p 4 patched-unsigned.apk patched-aligned.apk

      - name: Sign APK with apksigner.jar
        run: |
          echo "üîê Signing APK..."
          java -jar apksigner.jar sign \
            --key testkey.pk8 \
            --cert testkey.x509.pem \
            --out patched-signed.apk \
            patched-aligned.apk

      - name: Upload Unsigned APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-Unsigned-APK
          path: patched-unsigned.apk

      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-Signed-APK
          path: patched-signed.apk

      - name: Notify Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          VERSION=${{ steps.version.outputs.apk_version }}
          RUN_ID=${{ github.run_id }}
          REPO=${{ github.repository }}

          SIGNED_URL="https://nightly.link/${REPO}/actions/runs/${RUN_ID}/ProjectSekai-Signed-APK.zip"
          UNSIGNED_URL="https://nightly.link/${REPO}/actions/runs/${RUN_ID}/ProjectSekai-Unsigned-APK.zip"

          curl -H "Content-Type: application/json" \
            -X POST \
            -d '{
              "content": "**‚úÖ Project Sekai APK (Global) New APKs available!**\n**Version:** '"$VERSION"'\n\nüì• **Signed APK:** '"$SIGNED_URL"'\nüì• **Unsigned APK:** '"$UNSIGNED_URL"'"
            }' \
            $DISCORD_WEBHOOK
