name: Download, Patch & Recompile APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  patch-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install apkeep
        run: |
          sudo apt-get update
          sudo apt-get install -y cargo
          cargo install apkeep

      - name: Download APK/XAPK from APKPure
        run: |
          mkdir -p downloads
          apkeep -a com.sega.ColorfulStage.en -d apk-pure downloads

      - name: Install apktool
        run: |
          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O apktool
          wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.9.0.jar -O apktool.jar
          chmod +x apktool
          sudo mv apktool apktool.jar /usr/local/bin/

      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine wine32 wine64 winbind

      - name: Process and Decompile APK/XAPK
        run: |
          set -e
      
          FILE=$(ls downloads/*.{apk,xapk} 2>/dev/null | head -n1)
          if [ -z "$FILE" ]; then
            echo "‚ùå No .apk or .xapk found"; exit 1
          fi
      
          WORKDIR=$(pwd)
      
          if [[ "$FILE" == *.xapk ]]; then
            echo "üì¶ Detected XAPK, extracting..."
            TMPDIR=$(mktemp -d)
            unzip -q "$FILE" -d "$TMPDIR"
      
            echo "üì• Extracting and processing APKs inside XAPK..."
            APK_LIST=($(find "$TMPDIR" -type f -name "*.apk"))
            if [ ${#APK_LIST[@]} -eq 0 ]; then
              echo "‚ùå No APKs found inside XAPK"; exit 1
            fi
      
            echo "üîß Decompiling base APK (${APK_LIST[0]}) ‚Üí decompiled/"
            apktool d "${APK_LIST[0]}" -o decompiled
      
            echo "üîó Merging split APK contents into base decompiled folder..."
            for ((i=1; i<${#APK_LIST[@]}; i++)); do
              echo "‚ûï Merging: ${APK_LIST[i]}"
              unzip -o "${APK_LIST[i]}" -d tmp_extract
              cp -r tmp_extract/lib/* decompiled/lib/ 2>/dev/null || true
              cp -r tmp_extract/assets/* decompiled/assets/ 2>/dev/null || true
              cp -r tmp_extract/res/* decompiled/res/ 2>/dev/null || true
              rm -rf tmp_extract
            done
          else
            echo "üîß Decompiling single APK ‚Üí decompiled/"
            apktool d "$FILE" -o decompiled
          fi

      - name: Upload merged APK (if from XAPK)
        if: success() && hashFiles('downloads/merged.apk') != ''
        uses: actions/upload-artifact@v4
        with:
          name: Merged-APK
          path: downloads/merged.apk

      - name: List files in decompiled directory
        run: |
          echo "üìÇ Listing all files in decompiled directory:"
          find decompiled/ -type f | sort

      - name: Patch libil2cpp.so (if exists)
        run: |
          set -e

          LIB_PATH=$(find decompiled/ -type f -path "*/libil2cpp.so" | head -n1)
          if [ -z "$LIB_PATH" ]; then
            echo "‚ùå libil2cpp.so not found in decompiled directory"
            exit 1
          fi

          echo "üîß Found libil2cpp.so at $LIB_PATH, patching..."
          curl -L -o ProjectSekai.exe https://github.com/felzard/patch/releases/download/1/ProjectSekai.exe
          cd "$(dirname "$LIB_PATH")"
          wine "$OLDPWD/ProjectSekai.exe" libil2cpp.so
          rm libil2cpp.so "$OLDPWD/ProjectSekai.exe"
          mv libil2cpp_patched.so libil2cpp.so

      - name: Rebuild unsigned APK
        run: |
          apktool b decompiled -o patched-unsigned.apk

      - name: Generate debug keystore
        run: |
          keytool -genkey -v \
            -keystore debug.keystore \
            -alias androiddebugkey \
            -keyalg RSA -keysize 2048 \
            -validity 10000 \
            -storepass android \
            -keypass android \
            -dname "CN=Android Debug,O=Android,C=US"

      - name: Sign APK with debug keystore
        run: |
          jarsigner \
            -verbose \
            -sigalg SHA1withRSA \
            -digestalg SHA1 \
            -keystore debug.keystore \
            -storepass android \
            -keypass android \
            patched-unsigned.apk \
            androiddebugkey

      - name: Align signed APK
        run: |
          sudo apt-get install -y zipalign
          if ! command -v zipalign &> /dev/null; then
            echo "‚ùå zipalign not found in PATH"
            exit 1
          fi
          zipalign -v -p 4 patched-unsigned.apk patched-signed.apk


      - name: Upload Final APKs
        uses: actions/upload-artifact@v4
        with:
          name: ProjectSekai-Patched-APK
          path: |
            patched-unsigned.apk
            patched-signed.apk
